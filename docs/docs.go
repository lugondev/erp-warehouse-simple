// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "https://github.com/lugondev/erp-warehouse-simple",
            "email": "support@example.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/customers": {
            "get": {
                "description": "List customers with optional filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "List customers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by code",
                        "name": "code",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by type",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by email",
                        "name": "email",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by phone number",
                        "name": "phone_number",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by loyalty tier",
                        "name": "loyalty_tier",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by city",
                        "name": "city",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by country",
                        "name": "country",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Customer"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new customer with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Create a new customer",
                "parameters": [
                    {
                        "description": "Customer details",
                        "name": "customer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Customer"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entity.Customer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/customers/addresses/{addressId}": {
            "put": {
                "description": "Update a customer address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Update a customer address",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Address ID",
                        "name": "addressId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated address details",
                        "name": "address",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.CustomerAddress"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.CustomerAddress"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a customer address",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Delete a customer address",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Address ID",
                        "name": "addressId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/customers/{id}": {
            "get": {
                "description": "Get a customer's details by their ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Get a customer by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Customer"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a customer's details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Update a customer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated customer details",
                        "name": "customer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Customer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Customer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a customer by their ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Delete a customer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/customers/{id}/addresses": {
            "get": {
                "description": "Get all addresses for a customer",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Get all addresses for a customer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.CustomerAddress"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new address for a customer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Create a new address for a customer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Address details",
                        "name": "address",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.CustomerAddress"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entity.CustomerAddress"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/customers/{id}/debt": {
            "get": {
                "description": "Get a customer's debt information",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Get a customer's debt information",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.CustomerDebt"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a customer's debt amount",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Update a customer's debt amount",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Debt amount",
                        "name": "debt",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "number"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/customers/{id}/loyalty/calculate-tier": {
            "get": {
                "description": "Calculate a customer's loyalty tier based on points and purchase history",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Calculate a customer's loyalty tier",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/customers/{id}/loyalty/points": {
            "put": {
                "description": "Update a customer's loyalty points",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Update a customer's loyalty points",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Loyalty points",
                        "name": "points",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "integer"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/customers/{id}/loyalty/tier": {
            "put": {
                "description": "Update a customer's loyalty tier",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Update a customer's loyalty tier",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Loyalty tier",
                        "name": "tier",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/customers/{id}/orders": {
            "get": {
                "description": "Get a summary of a customer's order history",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Get a customer's order history",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.CustomerOrderHistory"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/finance/invoices": {
            "get": {
                "description": "List finance invoices based on filter criteria",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance"
                ],
                "summary": "List invoices",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invoice number",
                        "name": "invoice_number",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Invoice type (SALES/PURCHASE)",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Entity ID",
                        "name": "entity_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Entity type (CUSTOMER/SUPPLIER)",
                        "name": "entity_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Invoice status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start date (YYYY-MM-DD)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date (YYYY-MM-DD)",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.FinanceInvoiceListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.FinanceInvoiceListResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entity.FinanceInvoiceListResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new finance invoice",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance"
                ],
                "summary": "Create a new invoice",
                "parameters": [
                    {
                        "description": "Invoice details",
                        "name": "invoice",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.CreateFinanceInvoiceRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entity.FinanceInvoiceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.FinanceInvoiceResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entity.FinanceInvoiceResponse"
                        }
                    }
                }
            }
        },
        "/api/finance/invoices/{id}": {
            "get": {
                "description": "Get a finance invoice by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance"
                ],
                "summary": "Get an invoice by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.FinanceInvoiceResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/entity.FinanceInvoiceResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entity.FinanceInvoiceResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a finance invoice",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance"
                ],
                "summary": "Update an invoice",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Invoice details",
                        "name": "invoice",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.UpdateFinanceInvoiceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.FinanceInvoiceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.FinanceInvoiceResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/entity.FinanceInvoiceResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entity.FinanceInvoiceResponse"
                        }
                    }
                }
            }
        },
        "/api/finance/invoices/{id}/cancel": {
            "post": {
                "description": "Cancel a finance invoice",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance"
                ],
                "summary": "Cancel an invoice",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/finance/invoices/{id}/status": {
            "patch": {
                "description": "Update a finance invoice status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance"
                ],
                "summary": "Update an invoice status",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Status",
                        "name": "status",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/finance/payments": {
            "get": {
                "description": "List finance payments based on filter criteria",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance"
                ],
                "summary": "List payments",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Payment number",
                        "name": "payment_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Invoice ID",
                        "name": "invoice_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Invoice number",
                        "name": "invoice_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Entity ID",
                        "name": "entity_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Entity type (CUSTOMER/SUPPLIER)",
                        "name": "entity_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Payment status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Payment method",
                        "name": "payment_method",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start date (YYYY-MM-DD)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date (YYYY-MM-DD)",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.FinancePaymentListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.FinancePaymentListResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entity.FinancePaymentListResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new finance payment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance"
                ],
                "summary": "Create a new payment",
                "parameters": [
                    {
                        "description": "Payment details",
                        "name": "payment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.CreateFinancePaymentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entity.FinancePaymentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.FinancePaymentResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entity.FinancePaymentResponse"
                        }
                    }
                }
            }
        },
        "/api/finance/payments/{id}": {
            "get": {
                "description": "Get a finance payment by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance"
                ],
                "summary": "Get a payment by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Payment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.FinancePaymentResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/entity.FinancePaymentResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entity.FinancePaymentResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a finance payment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance"
                ],
                "summary": "Update a payment",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Payment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Payment details",
                        "name": "payment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.UpdateFinancePaymentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.FinancePaymentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.FinancePaymentResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/entity.FinancePaymentResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entity.FinancePaymentResponse"
                        }
                    }
                }
            }
        },
        "/api/finance/payments/{id}/cancel": {
            "post": {
                "description": "Cancel a finance payment",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance"
                ],
                "summary": "Cancel a payment",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Payment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/finance/payments/{id}/confirm": {
            "post": {
                "description": "Confirm a finance payment",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance"
                ],
                "summary": "Confirm a payment",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Payment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/finance/payments/{id}/refund": {
            "post": {
                "description": "Refund a finance payment",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance"
                ],
                "summary": "Refund a payment",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Payment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/finance/reports/accounts-payable": {
            "get": {
                "description": "Get accounts payable data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance"
                ],
                "summary": "Get accounts payable",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start date (YYYY-MM-DD)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date (YYYY-MM-DD)",
                        "name": "end_date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.FinanceAccountsPayable"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/finance/reports/accounts-receivable": {
            "get": {
                "description": "Get accounts receivable data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance"
                ],
                "summary": "Get accounts receivable",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start date (YYYY-MM-DD)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date (YYYY-MM-DD)",
                        "name": "end_date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.FinanceAccountsReceivable"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/finance/reports/finance": {
            "get": {
                "description": "Get a finance report for the specified period",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Finance"
                ],
                "summary": "Get finance report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start date (YYYY-MM-DD)",
                        "name": "start_date",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "End date (YYYY-MM-DD)",
                        "name": "end_date",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.FinanceReport"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/orders": {
            "get": {
                "description": "List sales orders with optional filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "List sales orders",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order Number",
                        "name": "order_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Customer ID",
                        "name": "customer_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order Status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Payment Status",
                        "name": "payment_status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start Date (YYYY-MM-DD)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End Date (YYYY-MM-DD)",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Item ID",
                        "name": "item_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.SalesOrder"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new sales order with items",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Create a new sales order",
                "parameters": [
                    {
                        "description": "Sales Order",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.CreateSalesOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entity.SalesOrder"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/orders/deliveries": {
            "get": {
                "description": "List delivery orders with optional filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "List delivery orders",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Delivery Number",
                        "name": "delivery_number",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sales Order ID",
                        "name": "sales_order_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Delivery Status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start Date (YYYY-MM-DD)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End Date (YYYY-MM-DD)",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Warehouse ID",
                        "name": "warehouse_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.DeliveryOrder"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/orders/deliveries/{id}": {
            "get": {
                "description": "Get a delivery order by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Get a delivery order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Delivery Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.DeliveryOrder"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/orders/deliveries/{id}/complete": {
            "post": {
                "description": "Mark a delivery as delivered",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Complete a delivery",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Delivery Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/orders/deliveries/{id}/prepare": {
            "post": {
                "description": "Update a delivery order status to preparing",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Prepare a delivery",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Delivery Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/orders/deliveries/{id}/ship": {
            "post": {
                "description": "Process a delivery by updating inventory and changing status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Ship a delivery",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Delivery Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/orders/invoices": {
            "get": {
                "description": "List invoices with optional filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "List invoices",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invoice Number",
                        "name": "invoice_number",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sales Order ID",
                        "name": "sales_order_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Invoice Status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start Date (YYYY-MM-DD)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End Date (YYYY-MM-DD)",
                        "name": "end_date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Invoice"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/orders/invoices/{id}": {
            "get": {
                "description": "Get an invoice by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Get an invoice",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Invoice"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/orders/invoices/{id}/issue": {
            "post": {
                "description": "Change an invoice from draft to issued status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Issue an invoice",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/orders/invoices/{id}/pay": {
            "post": {
                "description": "Mark an invoice as paid",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Pay an invoice",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/orders/{id}": {
            "get": {
                "description": "Get a sales order by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Get a sales order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Sales Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.SalesOrder"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/orders/{id}/cancel": {
            "post": {
                "description": "Cancel a sales order",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Cancel a sales order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Sales Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/orders/{id}/complete": {
            "post": {
                "description": "Mark a sales order as completed",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Complete a sales order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Sales Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/orders/{id}/confirm": {
            "post": {
                "description": "Change a sales order status from draft to confirmed",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Confirm a sales order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Sales Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/orders/{id}/deliveries": {
            "post": {
                "description": "Create a delivery order for a sales order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Create a delivery order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Sales Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Delivery Order",
                        "name": "delivery",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.CreateDeliveryOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entity.DeliveryOrder"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/orders/{id}/invoices": {
            "post": {
                "description": "Create an invoice for a sales order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Create an invoice",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Sales Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Invoice",
                        "name": "invoice",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.CreateInvoiceRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entity.Invoice"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/purchase/orders": {
            "get": {
                "description": "List purchase orders with filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase-orders"
                ],
                "summary": "List purchase orders",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order number",
                        "name": "order_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Supplier ID",
                        "name": "supplier_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Payment status",
                        "name": "payment_status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start date (YYYY-MM-DD)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date (YYYY-MM-DD)",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Item ID",
                        "name": "item_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new purchase order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase-orders"
                ],
                "summary": "Create a new purchase order",
                "parameters": [
                    {
                        "description": "Purchase order details",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.PurchaseOrder"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entity.PurchaseOrder"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/purchase/orders/{id}": {
            "get": {
                "description": "Get a purchase order by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase-orders"
                ],
                "summary": "Get a purchase order by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Purchase Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.PurchaseOrder"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a purchase order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase-orders"
                ],
                "summary": "Update a purchase order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Purchase Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated purchase order details",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.PurchaseOrder"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.PurchaseOrder"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a purchase order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase-orders"
                ],
                "summary": "Delete a purchase order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Purchase Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/purchase/orders/{id}/approve": {
            "post": {
                "description": "Approve a purchase order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase-orders"
                ],
                "summary": "Approve a purchase order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Purchase Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/purchase/orders/{id}/cancel": {
            "post": {
                "description": "Cancel a purchase order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase-orders"
                ],
                "summary": "Cancel a purchase order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Purchase Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/purchase/orders/{id}/close": {
            "post": {
                "description": "Close a purchase order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase-orders"
                ],
                "summary": "Close a purchase order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Purchase Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/purchase/orders/{id}/confirm": {
            "post": {
                "description": "Mark a purchase order as confirmed by supplier",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase-orders"
                ],
                "summary": "Confirm a purchase order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Purchase Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/purchase/orders/{id}/payment-summary": {
            "get": {
                "description": "Get payment summary for a purchase order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase-orders"
                ],
                "summary": "Get purchase order payment summary",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Purchase Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/purchase/orders/{id}/payments": {
            "get": {
                "description": "List purchase payments for a purchase order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase-orders"
                ],
                "summary": "List purchase payments by order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Purchase Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.PurchasePayment"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/purchase/orders/{id}/receipts": {
            "get": {
                "description": "List purchase receipts for a purchase order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase-orders"
                ],
                "summary": "List purchase receipts by order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Purchase Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.PurchaseReceipt"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/purchase/orders/{id}/send": {
            "post": {
                "description": "Mark a purchase order as sent to supplier",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase-orders"
                ],
                "summary": "Send a purchase order to supplier",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Purchase Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/purchase/orders/{id}/submit": {
            "post": {
                "description": "Submit a purchase order for approval",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase-orders"
                ],
                "summary": "Submit a purchase order for approval",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Purchase Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/purchase/payments": {
            "post": {
                "description": "Create a new purchase payment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase-payments"
                ],
                "summary": "Create a new purchase payment",
                "parameters": [
                    {
                        "description": "Purchase payment details",
                        "name": "payment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.PurchasePayment"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entity.PurchasePayment"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/purchase/payments/{id}": {
            "get": {
                "description": "Get a purchase payment by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase-payments"
                ],
                "summary": "Get a purchase payment by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Purchase Payment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.PurchasePayment"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/purchase/receipts": {
            "post": {
                "description": "Create a new purchase receipt",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase-receipts"
                ],
                "summary": "Create a new purchase receipt",
                "parameters": [
                    {
                        "description": "Purchase receipt details",
                        "name": "receipt",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.PurchaseReceipt"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entity.PurchaseReceipt"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/purchase/receipts/{id}": {
            "get": {
                "description": "Get a purchase receipt by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase-receipts"
                ],
                "summary": "Get a purchase receipt by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Purchase Receipt ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.PurchaseReceipt"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/purchase/requests": {
            "get": {
                "description": "List purchase requests with filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase-requests"
                ],
                "summary": "List purchase requests",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Request number",
                        "name": "request_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Requester ID",
                        "name": "requester_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start date (YYYY-MM-DD)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date (YYYY-MM-DD)",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Item ID",
                        "name": "item_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new purchase request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase-requests"
                ],
                "summary": "Create a new purchase request",
                "parameters": [
                    {
                        "description": "Purchase request details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.PurchaseRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entity.PurchaseRequest"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/purchase/requests/{id}": {
            "get": {
                "description": "Get a purchase request by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase-requests"
                ],
                "summary": "Get a purchase request by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Purchase Request ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.PurchaseRequest"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a purchase request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase-requests"
                ],
                "summary": "Update a purchase request",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Purchase Request ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated purchase request details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.PurchaseRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.PurchaseRequest"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a purchase request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase-requests"
                ],
                "summary": "Delete a purchase request",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Purchase Request ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/purchase/requests/{id}/approve": {
            "post": {
                "description": "Approve a purchase request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase-requests"
                ],
                "summary": "Approve a purchase request",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Purchase Request ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Approval details",
                        "name": "approval",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/purchase/requests/{id}/order": {
            "post": {
                "description": "Create a purchase order from a purchase request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase-requests"
                ],
                "summary": "Create a purchase order from a request",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Purchase Request ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Order details",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entity.PurchaseOrder"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/purchase/requests/{id}/reject": {
            "post": {
                "description": "Reject a purchase request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase-requests"
                ],
                "summary": "Reject a purchase request",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Purchase Request ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Rejection details",
                        "name": "rejection",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/purchase/requests/{id}/submit": {
            "post": {
                "description": "Submit a purchase request for approval",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase-requests"
                ],
                "summary": "Submit a purchase request for approval",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Purchase Request ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/suppliers": {
            "get": {
                "description": "Get a list of suppliers with optional filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "suppliers"
                ],
                "summary": "List suppliers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Supplier type",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Country",
                        "name": "country",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Name search",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Code search",
                        "name": "code",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Minimum rating",
                        "name": "min_rating",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Supplier"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new supplier with the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "suppliers"
                ],
                "summary": "Create a new supplier",
                "parameters": [
                    {
                        "description": "Supplier object",
                        "name": "supplier",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Supplier"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entity.Supplier"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/suppliers/{id}": {
            "get": {
                "description": "Get detailed information about a supplier",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "suppliers"
                ],
                "summary": "Get a supplier by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Supplier ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Supplier"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing supplier's information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "suppliers"
                ],
                "summary": "Update a supplier",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Supplier ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated supplier object",
                        "name": "supplier",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Supplier"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Supplier"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a supplier by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "suppliers"
                ],
                "summary": "Delete a supplier",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Supplier ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/audit/logs": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a paginated list of all audit logs",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "audit"
                ],
                "summary": "List all audit logs",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.AuditLogResponse"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/audit/logs/user/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get audit logs for a specific user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "audit"
                ],
                "summary": "Get user audit logs",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.AuditLog"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/forgot-password": {
            "post": {
                "description": "Send password reset token to user's email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Request password reset",
                "parameters": [
                    {
                        "description": "User email",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.ForgotPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Reset email sent",
                        "schema": {
                            "$ref": "#/definitions/server.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/login": {
            "post": {
                "description": "Authenticate user and return tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "User login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/server.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/refresh-token": {
            "post": {
                "description": "Get new access token using refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh access token",
                "parameters": [
                    {
                        "description": "Refresh token",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.RefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New access token",
                        "schema": {
                            "$ref": "#/definitions/server.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid refresh token",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/register": {
            "post": {
                "description": "Register a new user with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entity.User"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/reset-password": {
            "post": {
                "description": "Reset user password using reset token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Reset password",
                "parameters": [
                    {
                        "description": "Reset token and new password",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.ResetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset successful",
                        "schema": {
                            "$ref": "#/definitions/server.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/item-categories": {
            "get": {
                "description": "Get a list of all item categories",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "item-categories"
                ],
                "summary": "List item categories",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.ItemCategory"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new item category with the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "item-categories"
                ],
                "summary": "Create a new item category",
                "parameters": [
                    {
                        "description": "Item category object",
                        "name": "category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.ItemCategory"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entity.ItemCategory"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/item-categories/tree": {
            "get": {
                "description": "Get item categories in a hierarchical structure",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "item-categories"
                ],
                "summary": "Get item categories tree",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.ItemCategory"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/item-categories/{id}": {
            "get": {
                "description": "Get detailed information about an item category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "item-categories"
                ],
                "summary": "Get an item category by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.ItemCategory"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing item category's information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "item-categories"
                ],
                "summary": "Update an item category",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated category object",
                        "name": "category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.ItemCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.ItemCategory"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an item category by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "item-categories"
                ],
                "summary": "Delete an item category",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/item-categories/{id}/items": {
            "get": {
                "description": "Get items belonging to a specific category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "items"
                ],
                "summary": "Get items by category",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.PaginatedResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/items": {
            "get": {
                "description": "Get a list of items with optional filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "items"
                ],
                "summary": "List items",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SKU filter",
                        "name": "sku",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Name filter",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Category filter",
                        "name": "category",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Manufacturer ID filter",
                        "name": "manufacturer_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Supplier ID filter",
                        "name": "supplier_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Status filter (ACTIVE, INACTIVE, ARCHIVED)",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Minimum price filter",
                        "name": "min_price",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Maximum price filter",
                        "name": "max_price",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.PaginatedResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new item with the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "items"
                ],
                "summary": "Create a new item",
                "parameters": [
                    {
                        "description": "Item object",
                        "name": "item",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Item"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entity.Item"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/items/bulk": {
            "put": {
                "description": "Update multiple items in a single request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "items"
                ],
                "summary": "Bulk update items",
                "parameters": [
                    {
                        "description": "Array of item objects with IDs",
                        "name": "items",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Item"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Items updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create multiple items in a single request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "items"
                ],
                "summary": "Bulk create items",
                "parameters": [
                    {
                        "description": "Array of item objects",
                        "name": "items",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Item"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Items created successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/items/search": {
            "get": {
                "description": "Search for items based on a search term",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "items"
                ],
                "summary": "Search items",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search term",
                        "name": "q",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.PaginatedResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/items/sku/{sku}": {
            "get": {
                "description": "Get detailed information about an item using its SKU",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "items"
                ],
                "summary": "Get an item by SKU",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Item SKU",
                        "name": "sku",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Item"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/items/{id}": {
            "get": {
                "description": "Get detailed information about an item",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "items"
                ],
                "summary": "Get an item by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Item ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Item"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing item's information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "items"
                ],
                "summary": "Update an item",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Item ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated item object",
                        "name": "item",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Item"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Item"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an item by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "items"
                ],
                "summary": "Delete an item",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Item ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/manufacturing/bom": {
            "post": {
                "description": "Create bill of materials for a product",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Manufacturing"
                ],
                "summary": "Create BOM",
                "parameters": [
                    {
                        "description": "BOM details with items",
                        "name": "bom",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entity.BillOfMaterial"
                        }
                    }
                }
            }
        },
        "/api/v1/manufacturing/facilities": {
            "get": {
                "description": "Get list of all manufacturing facilities",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Manufacturing"
                ],
                "summary": "List facilities",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.ManufacturingFacility"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create new manufacturing facility",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Manufacturing"
                ],
                "summary": "Create manufacturing facility",
                "parameters": [
                    {
                        "description": "Facility details",
                        "name": "facility",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.ManufacturingFacility"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entity.ManufacturingFacility"
                        }
                    }
                }
            }
        },
        "/api/v1/manufacturing/facilities/{id}": {
            "get": {
                "description": "Get manufacturing facility details by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Manufacturing"
                ],
                "summary": "Get facility by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Facility ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.ManufacturingFacility"
                        }
                    }
                }
            }
        },
        "/api/v1/manufacturing/orders": {
            "post": {
                "description": "Create new production order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Manufacturing"
                ],
                "summary": "Create production order",
                "parameters": [
                    {
                        "description": "Production order details",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.ProductionOrder"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entity.ProductionOrder"
                        }
                    }
                }
            }
        },
        "/api/v1/manufacturing/orders/{id}/progress": {
            "put": {
                "description": "Update production progress for an order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Manufacturing"
                ],
                "summary": "Update production progress",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Progress details",
                        "name": "progress",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "integer"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Progress updated",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/manufacturing/orders/{id}/start": {
            "post": {
                "description": "Start production for an order",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Manufacturing"
                ],
                "summary": "Start production",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Production started",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/reports": {
            "get": {
                "description": "List reports based on filter criteria",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "List reports",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Report name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Report type",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start date (YYYY-MM-DD)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date (YYYY-MM-DD)",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Report status",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new report",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Create a new report",
                "parameters": [
                    {
                        "description": "Report details",
                        "name": "report",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.CreateReportRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/reports/dashboard/metrics": {
            "get": {
                "description": "Get dashboard metrics",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Get dashboard metrics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Period (day, week, month, quarter, year)",
                        "name": "period",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/reports/financial/profit-loss": {
            "get": {
                "description": "Get profit and loss report",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Get profit and loss report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start date (YYYY-MM-DD)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date (YYYY-MM-DD)",
                        "name": "end_date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/reports/inventory/age": {
            "get": {
                "description": "Get inventory age report",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Get inventory age report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Warehouse ID",
                        "name": "warehouse_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "As of date (YYYY-MM-DD)",
                        "name": "as_of_date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/reports/inventory/value": {
            "get": {
                "description": "Get inventory value report",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Get inventory value report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Warehouse ID",
                        "name": "warehouse_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "As of date (YYYY-MM-DD)",
                        "name": "as_of_date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/reports/purchases/suppliers": {
            "get": {
                "description": "Get supplier purchase report",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Get supplier purchase report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start date (YYYY-MM-DD)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date (YYYY-MM-DD)",
                        "name": "end_date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/reports/sales/customers": {
            "get": {
                "description": "Get customer sales report",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Get customer sales report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start date (YYYY-MM-DD)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date (YYYY-MM-DD)",
                        "name": "end_date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/reports/sales/products": {
            "get": {
                "description": "Get product sales report",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Get product sales report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start date (YYYY-MM-DD)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date (YYYY-MM-DD)",
                        "name": "end_date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/reports/schedules": {
            "get": {
                "description": "List report schedules based on filter criteria",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "List report schedules",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Schedule name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Report type",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Schedule frequency",
                        "name": "frequency",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Active status",
                        "name": "active",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new report schedule",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Create a new report schedule",
                "parameters": [
                    {
                        "description": "Report schedule details",
                        "name": "schedule",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.CreateReportScheduleRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/reports/schedules/{id}": {
            "get": {
                "description": "Get a report schedule by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Get a report schedule by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Report Schedule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Update a report schedule",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Update a report schedule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Report Schedule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Report schedule details",
                        "name": "schedule",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.UpdateReportScheduleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a report schedule by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Delete a report schedule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Report Schedule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/reports/{id}": {
            "get": {
                "description": "Get a report by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Get a report by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Report ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a report by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Delete a report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Report ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/reports/{id}/export": {
            "post": {
                "description": "Export a report to a specific format (CSV, Excel, PDF)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Export a report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Report ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Export format (CSV, EXCEL, PDF)",
                        "name": "format",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/roles": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a list of all roles",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "List all roles",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Role"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new role with specified permissions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Create new role",
                "parameters": [
                    {
                        "description": "Role details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.CreateRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entity.Role"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/roles/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get role details by role ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Get role by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Role"
                        }
                    },
                    "400": {
                        "description": "Invalid role ID",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Role not found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update role details and permissions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Update role",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Role details to update",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.UpdateRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Role"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete role by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Delete role",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/server.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid role ID",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a list of all users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "List all users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.User"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/users/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Invalidate user's refresh token",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User logout",
                "responses": {
                    "200": {
                        "description": "Logged out successfully",
                        "schema": {
                            "$ref": "#/definitions/server.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get user details by user ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.User"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update user details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User details to update",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.User"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete user by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/server.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/inventory": {
            "get": {
                "description": "List inventory with optional filters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "List inventory",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by warehouse ID",
                        "name": "warehouse_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by product ID",
                        "name": "product_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by batch number",
                        "name": "batch_number",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Inventory"
                            }
                        }
                    }
                }
            }
        },
        "/inventory/batch-stock-entries": {
            "post": {
                "description": "Process multiple stock entries in batch",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Process batch stock entry",
                "parameters": [
                    {
                        "description": "Array of stock entries",
                        "name": "entries",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.StockEntry"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/inventory/check-stock": {
            "get": {
                "description": "Check stock level for a product in a warehouse",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Check stock",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Warehouse ID",
                        "name": "warehouse_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "product_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Inventory"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/inventory/stock-entries": {
            "post": {
                "description": "Process a stock entry (in/out)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Process stock entry",
                "parameters": [
                    {
                        "description": "Stock entry details",
                        "name": "entry",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.StockEntry"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.StockEntry"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/inventory/{id}/history": {
            "get": {
                "description": "Get history of stock movements for an inventory item",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Get inventory history",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Inventory ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.InventoryHistory"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/inventory/{id}/location": {
            "put": {
                "description": "Update stock location details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventory"
                ],
                "summary": "Update stock location",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Inventory ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Location details",
                        "name": "location",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.LocationUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/warehouses": {
            "get": {
                "description": "List all warehouses with optional filters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Warehouses"
                ],
                "summary": "List warehouses",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Warehouse type",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Warehouse status",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Warehouse"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new warehouse",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Warehouses"
                ],
                "summary": "Create warehouse",
                "parameters": [
                    {
                        "description": "Warehouse info",
                        "name": "warehouse",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Warehouse"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entity.Warehouse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/warehouses/{id}": {
            "get": {
                "description": "Get warehouse by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Warehouses"
                ],
                "summary": "Get warehouse",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Warehouse ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Warehouse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing warehouse",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Warehouses"
                ],
                "summary": "Update warehouse",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Warehouse ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Warehouse info",
                        "name": "warehouse",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Warehouse"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Warehouse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a warehouse by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Warehouses"
                ],
                "summary": "Delete warehouse",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Warehouse ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "entity.ActionType": {
            "type": "string",
            "enum": [
                "create",
                "read",
                "update",
                "delete",
                "login",
                "logout"
            ],
            "x-enum-varnames": [
                "ActionCreate",
                "ActionRead",
                "ActionUpdate",
                "ActionDelete",
                "ActionLogin",
                "ActionLogout"
            ]
        },
        "entity.AddressType": {
            "type": "string",
            "enum": [
                "BILLING",
                "SHIPPING",
                "BOTH"
            ],
            "x-enum-varnames": [
                "AddressTypeBilling",
                "AddressTypeShipping",
                "AddressTypeBoth"
            ]
        },
        "entity.AuditLog": {
            "type": "object",
            "properties": {
                "action": {
                    "$ref": "#/definitions/entity.ActionType"
                },
                "created_at": {
                    "type": "string"
                },
                "detail": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "ip": {
                    "type": "string"
                },
                "resource": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/entity.User"
                },
                "user_agent": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "entity.BillOfMaterial": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "product_id": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "entity.ContactInfo": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "tax_id": {
                    "type": "string"
                },
                "website": {
                    "type": "string"
                }
            }
        },
        "entity.Contract": {
            "type": "object",
            "properties": {
                "contract_no": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "start_date": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "supplier_id": {
                    "type": "integer"
                },
                "terms": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "entity.CreateFinanceInvoiceRequest": {
            "type": "object",
            "required": [
                "due_date",
                "entity_id",
                "entity_type",
                "issue_date",
                "items",
                "type"
            ],
            "properties": {
                "discount_amount": {
                    "type": "number"
                },
                "due_date": {
                    "type": "string"
                },
                "entity_id": {
                    "type": "integer"
                },
                "entity_type": {
                    "type": "string",
                    "enum": [
                        "CUSTOMER",
                        "SUPPLIER"
                    ]
                },
                "issue_date": {
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.FinanceInvoiceItem"
                    }
                },
                "notes": {
                    "type": "string"
                },
                "reference_id": {
                    "type": "string"
                },
                "type": {
                    "enum": [
                        "SALES",
                        "PURCHASE"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.FinanceInvoiceType"
                        }
                    ]
                }
            }
        },
        "entity.CreateFinancePaymentRequest": {
            "type": "object",
            "required": [
                "amount",
                "invoice_id",
                "payment_date",
                "payment_method"
            ],
            "properties": {
                "amount": {
                    "type": "number"
                },
                "invoice_id": {
                    "type": "integer"
                },
                "notes": {
                    "type": "string"
                },
                "payment_date": {
                    "type": "string"
                },
                "payment_method": {
                    "$ref": "#/definitions/entity.FinancePaymentMethod"
                },
                "reference_number": {
                    "type": "string"
                }
            }
        },
        "entity.CreateReportRequest": {
            "type": "object",
            "required": [
                "end_date",
                "format",
                "name",
                "start_date",
                "type"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "format": {
                    "$ref": "#/definitions/entity.ReportFormat"
                },
                "name": {
                    "type": "string"
                },
                "parameters": {
                    "$ref": "#/definitions/entity.ReportParameters"
                },
                "start_date": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/entity.ReportType"
                }
            }
        },
        "entity.CreateReportScheduleRequest": {
            "type": "object",
            "required": [
                "format",
                "frequency",
                "name",
                "recipients",
                "report_type"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "format": {
                    "$ref": "#/definitions/entity.ReportFormat"
                },
                "frequency": {
                    "$ref": "#/definitions/entity.ReportScheduleFrequency"
                },
                "name": {
                    "type": "string"
                },
                "parameters": {
                    "$ref": "#/definitions/entity.ReportParameters"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "report_type": {
                    "$ref": "#/definitions/entity.ReportType"
                }
            }
        },
        "entity.Customer": {
            "type": "object",
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.CustomerAddress"
                    }
                },
                "code": {
                    "type": "string"
                },
                "contacts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.CustomerContact"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "credit_limit": {
                    "type": "number"
                },
                "current_debt": {
                    "type": "number"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "loyalty_points": {
                    "type": "integer"
                },
                "loyalty_tier": {
                    "$ref": "#/definitions/entity.CustomerLoyaltyTier"
                },
                "name": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "sales_orders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.SalesOrder"
                    }
                },
                "tax_id": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/entity.CustomerType"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "entity.CustomerAddress": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "customer_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "is_default": {
                    "type": "boolean"
                },
                "postal_code": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "street": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/entity.AddressType"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "entity.CustomerContact": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "position": {
                    "type": "string"
                }
            }
        },
        "entity.CustomerDebt": {
            "type": "object",
            "properties": {
                "last_payment_amount": {
                    "type": "number"
                },
                "last_payment_date": {
                    "type": "string"
                },
                "overdue_debt": {
                    "type": "number"
                },
                "total_debt": {
                    "type": "number"
                },
                "upcoming_payments": {
                    "type": "number"
                }
            }
        },
        "entity.CustomerLoyaltyTier": {
            "type": "string",
            "enum": [
                "STANDARD",
                "SILVER",
                "GOLD",
                "PLATINUM"
            ],
            "x-enum-varnames": [
                "CustomerLoyaltyTierStandard",
                "CustomerLoyaltyTierSilver",
                "CustomerLoyaltyTierGold",
                "CustomerLoyaltyTierPlatinum"
            ]
        },
        "entity.CustomerOrderHistory": {
            "type": "object",
            "properties": {
                "average_order_value": {
                    "type": "number"
                },
                "first_order_date": {
                    "type": "string"
                },
                "frequent_items": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "last_order_date": {
                    "type": "string"
                },
                "total_orders": {
                    "type": "integer"
                },
                "total_spent": {
                    "type": "number"
                }
            }
        },
        "entity.CustomerType": {
            "type": "string",
            "enum": [
                "INDIVIDUAL",
                "CORPORATE",
                "RESELLER",
                "WHOLESALER"
            ],
            "x-enum-varnames": [
                "CustomerTypeIndividual",
                "CustomerTypeCorporate",
                "CustomerTypeReseller",
                "CustomerTypeWholesaler"
            ]
        },
        "entity.DeliveryOrder": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "$ref": "#/definitions/entity.User"
                },
                "created_by_id": {
                    "type": "integer"
                },
                "delivery_date": {
                    "type": "string"
                },
                "delivery_number": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.DeliveryOrderItem"
                    }
                },
                "notes": {
                    "type": "string"
                },
                "sales_order": {
                    "$ref": "#/definitions/entity.SalesOrder"
                },
                "sales_order_id": {
                    "type": "string"
                },
                "shipping_address": {
                    "type": "string"
                },
                "shipping_method": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/entity.DeliveryOrderStatus"
                },
                "tracking_number": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "warehouse_id": {
                    "type": "string"
                }
            }
        },
        "entity.DeliveryOrderItem": {
            "type": "object",
            "properties": {
                "item": {
                    "$ref": "#/definitions/entity.Item"
                },
                "item_id": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "ordered_quantity": {
                    "type": "number"
                },
                "remaining_quantity": {
                    "type": "number"
                },
                "shipped_quantity": {
                    "type": "number"
                }
            }
        },
        "entity.DeliveryOrderStatus": {
            "type": "string",
            "enum": [
                "PENDING",
                "PREPARING",
                "IN_TRANSIT",
                "DELIVERED",
                "CANCELLED",
                "RETURNED"
            ],
            "x-enum-varnames": [
                "DeliveryOrderStatusPending",
                "DeliveryOrderStatusPreparing",
                "DeliveryOrderStatusInTransit",
                "DeliveryOrderStatusDelivered",
                "DeliveryOrderStatusCancelled",
                "DeliveryOrderStatusReturned"
            ]
        },
        "entity.FinanceAccountsPayable": {
            "type": "object",
            "properties": {
                "amount_due": {
                    "type": "number"
                },
                "amount_paid": {
                    "type": "number"
                },
                "days_overdue": {
                    "type": "integer"
                },
                "due_date": {
                    "type": "string"
                },
                "entity_id": {
                    "type": "integer"
                },
                "entity_name": {
                    "type": "string"
                },
                "invoice_date": {
                    "type": "string"
                },
                "invoice_id": {
                    "type": "integer"
                },
                "invoice_number": {
                    "type": "string"
                },
                "last_payment_date": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "total_amount": {
                    "type": "number"
                }
            }
        },
        "entity.FinanceAccountsReceivable": {
            "type": "object",
            "properties": {
                "amount_due": {
                    "type": "number"
                },
                "amount_paid": {
                    "type": "number"
                },
                "days_overdue": {
                    "type": "integer"
                },
                "due_date": {
                    "type": "string"
                },
                "entity_id": {
                    "type": "integer"
                },
                "entity_name": {
                    "type": "string"
                },
                "invoice_date": {
                    "type": "string"
                },
                "invoice_id": {
                    "type": "integer"
                },
                "invoice_number": {
                    "type": "string"
                },
                "last_payment_date": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "total_amount": {
                    "type": "number"
                }
            }
        },
        "entity.FinanceInvoice": {
            "type": "object",
            "properties": {
                "amount_due": {
                    "type": "number"
                },
                "amount_paid": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "integer"
                },
                "discount_amount": {
                    "type": "number"
                },
                "due_date": {
                    "type": "string"
                },
                "entity_id": {
                    "type": "integer"
                },
                "entity_name": {
                    "type": "string"
                },
                "entity_type": {
                    "description": "\"CUSTOMER\" or \"SUPPLIER\"",
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "invoice_number": {
                    "type": "string"
                },
                "issue_date": {
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.FinanceInvoiceItem"
                    }
                },
                "notes": {
                    "type": "string"
                },
                "reference_id": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/entity.FinanceInvoiceStatus"
                },
                "subtotal": {
                    "type": "number"
                },
                "tax_total": {
                    "type": "number"
                },
                "total": {
                    "type": "number"
                },
                "type": {
                    "$ref": "#/definitions/entity.FinanceInvoiceType"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "entity.FinanceInvoiceItem": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "invoice_id": {
                    "type": "integer"
                },
                "product_id": {
                    "type": "integer"
                },
                "product_name": {
                    "type": "string"
                },
                "quantity": {
                    "type": "number"
                },
                "subtotal": {
                    "type": "number"
                },
                "tax_amount": {
                    "type": "number"
                },
                "tax_rate": {
                    "type": "number"
                },
                "total": {
                    "type": "number"
                },
                "unit_price": {
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "entity.FinanceInvoiceListResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "invoices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.FinanceInvoice"
                    }
                },
                "page": {
                    "type": "integer"
                },
                "page_size": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "entity.FinanceInvoiceResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "invoice": {
                    "$ref": "#/definitions/entity.FinanceInvoice"
                }
            }
        },
        "entity.FinanceInvoiceStatus": {
            "type": "string",
            "enum": [
                "DRAFT",
                "PENDING",
                "APPROVED",
                "PAID",
                "PARTIALLY_PAID",
                "CANCELLED",
                "OVERDUE"
            ],
            "x-enum-varnames": [
                "FinanceInvoiceDraft",
                "FinanceInvoicePending",
                "FinanceInvoiceApproved",
                "FinanceInvoicePaid",
                "FinanceInvoicePartiallyPaid",
                "FinanceInvoiceCancelled",
                "FinanceInvoiceOverdue"
            ]
        },
        "entity.FinanceInvoiceType": {
            "type": "string",
            "enum": [
                "SALES",
                "PURCHASE"
            ],
            "x-enum-varnames": [
                "FinanceSalesInvoice",
                "FinancePurchaseInvoice"
            ]
        },
        "entity.FinancePayment": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "integer"
                },
                "entity_id": {
                    "type": "integer"
                },
                "entity_name": {
                    "type": "string"
                },
                "entity_type": {
                    "description": "\"CUSTOMER\" or \"SUPPLIER\"",
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "invoice_id": {
                    "type": "integer"
                },
                "invoice_number": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "payment_date": {
                    "type": "string"
                },
                "payment_method": {
                    "$ref": "#/definitions/entity.FinancePaymentMethod"
                },
                "payment_number": {
                    "type": "string"
                },
                "reference_number": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/entity.FinancePaymentStatus"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "entity.FinancePaymentListResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "page_size": {
                    "type": "integer"
                },
                "payments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.FinancePayment"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "entity.FinancePaymentMethod": {
            "type": "string",
            "enum": [
                "CASH",
                "BANK_TRANSFER",
                "CREDIT_CARD",
                "CHECK",
                "DIGITAL_WALLET",
                "OTHER"
            ],
            "x-enum-varnames": [
                "FinancePaymentMethodCash",
                "FinancePaymentMethodBankTransfer",
                "FinancePaymentMethodCreditCard",
                "FinancePaymentMethodCheck",
                "FinancePaymentMethodDigitalWallet",
                "FinancePaymentMethodOther"
            ]
        },
        "entity.FinancePaymentResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "payment": {
                    "$ref": "#/definitions/entity.FinancePayment"
                }
            }
        },
        "entity.FinancePaymentStatus": {
            "type": "string",
            "enum": [
                "PENDING",
                "COMPLETED",
                "FAILED",
                "CANCELLED",
                "REFUNDED"
            ],
            "x-enum-varnames": [
                "FinancePaymentPending",
                "FinancePaymentCompleted",
                "FinancePaymentFailed",
                "FinancePaymentCancelled",
                "FinancePaymentRefunded"
            ]
        },
        "entity.FinanceReport": {
            "type": "object",
            "properties": {
                "end_date": {
                    "type": "string"
                },
                "gross_profit": {
                    "type": "number"
                },
                "net_profit": {
                    "type": "number"
                },
                "start_date": {
                    "type": "string"
                },
                "total_cost": {
                    "type": "number"
                },
                "total_revenue": {
                    "type": "number"
                },
                "total_tax": {
                    "type": "number"
                }
            }
        },
        "entity.Inventory": {
            "type": "object",
            "properties": {
                "batch_number": {
                    "type": "string"
                },
                "bin_location": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "expiry_date": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lot_number": {
                    "type": "string"
                },
                "manufacture_date": {
                    "type": "string"
                },
                "product_id": {
                    "type": "string"
                },
                "quantity": {
                    "type": "number"
                },
                "shelf_number": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "warehouse_id": {
                    "type": "string"
                },
                "zone_code": {
                    "type": "string"
                }
            }
        },
        "entity.InventoryHistory": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "inventory_id": {
                    "type": "string"
                },
                "new_qty": {
                    "type": "number"
                },
                "note": {
                    "type": "string"
                },
                "previous_qty": {
                    "type": "number"
                },
                "quantity": {
                    "type": "number"
                },
                "reference": {
                    "description": "Stock Entry ID",
                    "type": "string"
                },
                "type": {
                    "description": "IN/OUT/ADJUST",
                    "type": "string"
                }
            }
        },
        "entity.Invoice": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "$ref": "#/definitions/entity.User"
                },
                "created_by_id": {
                    "type": "integer"
                },
                "due_date": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "invoice_number": {
                    "type": "string"
                },
                "issue_date": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "sales_order": {
                    "$ref": "#/definitions/entity.SalesOrder"
                },
                "sales_order_id": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/entity.InvoiceStatus"
                },
                "tax_amount": {
                    "type": "number"
                },
                "total_amount": {
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "entity.InvoiceStatus": {
            "type": "string",
            "enum": [
                "DRAFT",
                "ISSUED",
                "PAID",
                "PARTIAL",
                "OVERDUE",
                "CANCELLED"
            ],
            "x-enum-varnames": [
                "InvoiceStatusDraft",
                "InvoiceStatusIssued",
                "InvoiceStatusPaid",
                "InvoiceStatusPartial",
                "InvoiceStatusOverdue",
                "InvoiceStatusCancelled"
            ]
        },
        "entity.Item": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image_url": {
                    "type": "string"
                },
                "manufacturer": {
                    "$ref": "#/definitions/entity.Supplier"
                },
                "manufacturer_id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "sku": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/entity.ItemStatus"
                },
                "supplier": {
                    "$ref": "#/definitions/entity.Supplier"
                },
                "supplier_id": {
                    "type": "integer"
                },
                "technical_specs": {
                    "$ref": "#/definitions/entity.TechnicalSpecs"
                },
                "unit_of_measure": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "entity.ItemCategory": {
            "type": "object",
            "properties": {
                "children": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.ItemCategory"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parent": {
                    "$ref": "#/definitions/entity.ItemCategory"
                },
                "parent_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "entity.ItemStatus": {
            "type": "string",
            "enum": [
                "ACTIVE",
                "INACTIVE",
                "ARCHIVED"
            ],
            "x-enum-varnames": [
                "ItemStatusActive",
                "ItemStatusInactive",
                "ItemStatusArchived"
            ]
        },
        "entity.LocationUpdate": {
            "type": "object",
            "properties": {
                "bin_location": {
                    "type": "string"
                },
                "shelf_number": {
                    "type": "string"
                },
                "zone_code": {
                    "type": "string"
                }
            }
        },
        "entity.ManufacturingFacility": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "capacity": {
                    "description": "Production capacity per day",
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "manager": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "entity.PaymentMethod": {
            "type": "string",
            "enum": [
                "CASH",
                "CREDIT_CARD",
                "BANK_TRANSFER",
                "DIGITAL_WALLET"
            ],
            "x-enum-varnames": [
                "PaymentMethodCash",
                "PaymentMethodCreditCard",
                "PaymentMethodBankTransfer",
                "PaymentMethodDigitalWallet"
            ]
        },
        "entity.PaymentStatus": {
            "type": "string",
            "enum": [
                "PENDING",
                "PARTIAL",
                "PAID",
                "OVERDUE",
                "CANCELLED"
            ],
            "x-enum-varnames": [
                "PaymentStatusPending",
                "PaymentStatusPartial",
                "PaymentStatusPaid",
                "PaymentStatusOverdue",
                "PaymentStatusCancelled"
            ]
        },
        "entity.PaymentTerms": {
            "type": "object",
            "properties": {
                "currency": {
                    "type": "string"
                },
                "payment_days": {
                    "type": "integer"
                },
                "payment_method": {
                    "type": "string"
                }
            }
        },
        "entity.Permission": {
            "type": "string",
            "enum": [
                "supplier:create",
                "supplier:read",
                "supplier:update",
                "supplier:delete",
                "product:create",
                "product:read",
                "product:update",
                "product:delete",
                "contract:create",
                "contract:read",
                "contract:update",
                "contract:delete",
                "rating:create",
                "rating:read",
                "manufacturing:facility:create",
                "manufacturing:facility:read",
                "manufacturing:facility:update",
                "manufacturing:facility:delete",
                "manufacturing:order:create",
                "manufacturing:order:read",
                "manufacturing:order:update",
                "manufacturing:order:delete",
                "manufacturing:bom:create",
                "manufacturing:bom:read",
                "manufacturing:bom:update",
                "manufacturing:bom:delete",
                "purchase:request:create",
                "purchase:request:read",
                "purchase:request:update",
                "purchase:request:delete",
                "purchase:request:approve",
                "purchase:order:create",
                "purchase:order:read",
                "purchase:order:update",
                "purchase:order:delete",
                "purchase:order:approve",
                "purchase:receipt:create",
                "purchase:receipt:read",
                "purchase:receipt:update",
                "purchase:payment:create",
                "purchase:payment:read",
                "purchase:payment:update",
                "customer:create",
                "customer:read",
                "customer:update",
                "customer:delete",
                "customer:address:create",
                "customer:address:read",
                "customer:address:update",
                "customer:address:delete",
                "customer:debt:read",
                "customer:debt:update",
                "customer:loyalty:read",
                "customer:loyalty:update",
                "sales:order:create",
                "sales:order:read",
                "sales:order:update",
                "sales:order:delete",
                "sales:order:confirm",
                "sales:order:cancel",
                "delivery:order:create",
                "delivery:order:read",
                "delivery:order:update",
                "delivery:order:process",
                "invoice:create",
                "invoice:read",
                "invoice:update",
                "invoice:issue",
                "invoice:pay",
                "finance:invoice:create",
                "finance:invoice:read",
                "finance:invoice:update",
                "finance:invoice:delete",
                "finance:payment:create",
                "finance:payment:read",
                "finance:payment:update",
                "finance:payment:process",
                "finance:report:read",
                "report:create",
                "report:read",
                "report:update",
                "report:delete",
                "report:export",
                "report:schedule:create",
                "report:schedule:read",
                "report:schedule:update",
                "report:schedule:delete",
                "user:create",
                "user:read",
                "user:update",
                "user:delete",
                "role:create",
                "role:read",
                "role:update",
                "role:delete",
                "audit:read",
                "module:integrate",
                "warehouse:create",
                "warehouse:read",
                "warehouse:update",
                "warehouse:delete",
                "inventory:read",
                "inventory:update",
                "stock:create",
                "stock:read"
            ],
            "x-enum-varnames": [
                "SupplierCreate",
                "SupplierRead",
                "SupplierUpdate",
                "SupplierDelete",
                "ProductCreate",
                "ProductRead",
                "ProductUpdate",
                "ProductDelete",
                "ContractCreate",
                "ContractRead",
                "ContractUpdate",
                "ContractDelete",
                "RatingCreate",
                "RatingRead",
                "ManufacturingFacilityCreate",
                "ManufacturingFacilityRead",
                "ManufacturingFacilityUpdate",
                "ManufacturingFacilityDelete",
                "ProductionOrderCreate",
                "ProductionOrderRead",
                "ProductionOrderUpdate",
                "ProductionOrderDelete",
                "BOMCreate",
                "BOMRead",
                "BOMUpdate",
                "BOMDelete",
                "PurchaseRequestCreate",
                "PurchaseRequestRead",
                "PurchaseRequestUpdate",
                "PurchaseRequestDelete",
                "PurchaseRequestApprove",
                "PurchaseOrderCreate",
                "PurchaseOrderRead",
                "PurchaseOrderUpdate",
                "PurchaseOrderDelete",
                "PurchaseOrderApprove",
                "PurchaseReceiptCreate",
                "PurchaseReceiptRead",
                "PurchaseReceiptUpdate",
                "PurchasePaymentCreate",
                "PurchasePaymentRead",
                "PurchasePaymentUpdate",
                "CustomerCreate",
                "CustomerRead",
                "CustomerUpdate",
                "CustomerDelete",
                "CustomerAddressCreate",
                "CustomerAddressRead",
                "CustomerAddressUpdate",
                "CustomerAddressDelete",
                "CustomerDebtRead",
                "CustomerDebtUpdate",
                "CustomerLoyaltyRead",
                "CustomerLoyaltyUpdate",
                "SalesOrderCreate",
                "SalesOrderRead",
                "SalesOrderUpdate",
                "SalesOrderDelete",
                "SalesOrderConfirm",
                "SalesOrderCancel",
                "DeliveryOrderCreate",
                "DeliveryOrderRead",
                "DeliveryOrderUpdate",
                "DeliveryOrderProcess",
                "InvoiceCreate",
                "InvoiceRead",
                "InvoiceUpdate",
                "InvoiceIssue",
                "InvoicePay",
                "FinanceInvoiceCreate",
                "FinanceInvoiceRead",
                "FinanceInvoiceUpdate",
                "FinanceInvoiceDelete",
                "FinancePaymentCreate",
                "FinancePaymentRead",
                "FinancePaymentUpdate",
                "FinancePaymentProcess",
                "FinanceReportRead",
                "ReportCreate",
                "ReportRead",
                "ReportUpdate",
                "ReportDelete",
                "ReportExport",
                "ReportScheduleCreate",
                "ReportScheduleRead",
                "ReportScheduleUpdate",
                "ReportScheduleDelete",
                "UserCreate",
                "UserRead",
                "UserUpdate",
                "UserDelete",
                "RoleCreate",
                "RoleRead",
                "RoleUpdate",
                "RoleDelete",
                "AuditLogRead",
                "ModuleIntegrate",
                "WarehouseCreate",
                "WarehouseRead",
                "WarehouseUpdate",
                "WarehouseDelete",
                "InventoryRead",
                "InventoryUpdate",
                "StockEntryCreate",
                "StockEntryRead"
            ]
        },
        "entity.Product": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "unit_price": {
                    "type": "number"
                }
            }
        },
        "entity.ProductionOrder": {
            "type": "object",
            "properties": {
                "completed_qty": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "deadline": {
                    "type": "string"
                },
                "defect_qty": {
                    "type": "integer"
                },
                "facility_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "notes": {
                    "type": "string"
                },
                "product_id": {
                    "type": "integer"
                },
                "quantity": {
                    "type": "integer"
                },
                "start_date": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/entity.ProductionOrderStatus"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "entity.ProductionOrderStatus": {
            "type": "string",
            "enum": [
                "pending",
                "in_process",
                "completed",
                "cancelled"
            ],
            "x-enum-varnames": [
                "OrderStatusPending",
                "OrderStatusInProcess",
                "OrderStatusCompleted",
                "OrderStatusCancelled"
            ]
        },
        "entity.PurchaseOrder": {
            "type": "object",
            "properties": {
                "approval_date": {
                    "type": "string"
                },
                "approved_by": {
                    "$ref": "#/definitions/entity.User"
                },
                "approved_by_id": {
                    "type": "integer"
                },
                "attachment_urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "$ref": "#/definitions/entity.User"
                },
                "created_by_id": {
                    "type": "integer"
                },
                "currency_code": {
                    "type": "string"
                },
                "discount_total": {
                    "type": "number"
                },
                "expected_date": {
                    "type": "string"
                },
                "grand_total": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.PurchaseOrderItem"
                    }
                },
                "notes": {
                    "type": "string"
                },
                "order_date": {
                    "type": "string"
                },
                "order_number": {
                    "type": "string"
                },
                "payment_status": {
                    "$ref": "#/definitions/entity.PaymentStatus"
                },
                "payment_terms": {
                    "type": "string"
                },
                "purchase_requests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.PurchaseRequest"
                    }
                },
                "shipping_address": {
                    "type": "string"
                },
                "shipping_method": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/entity.PurchaseOrderStatus"
                },
                "sub_total": {
                    "type": "number"
                },
                "supplier": {
                    "$ref": "#/definitions/entity.Supplier"
                },
                "supplier_id": {
                    "type": "integer"
                },
                "tax_total": {
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "entity.PurchaseOrderItem": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "discount": {
                    "type": "number"
                },
                "item": {
                    "$ref": "#/definitions/entity.Item"
                },
                "item_id": {
                    "type": "string"
                },
                "quantity": {
                    "type": "number"
                },
                "tax_amount": {
                    "type": "number"
                },
                "tax_rate": {
                    "type": "number"
                },
                "total_price": {
                    "type": "number"
                },
                "unit_price": {
                    "type": "number"
                }
            }
        },
        "entity.PurchaseOrderStatus": {
            "type": "string",
            "enum": [
                "DRAFT",
                "SUBMITTED",
                "APPROVED",
                "SENT",
                "CONFIRMED",
                "PARTIALLY_RECEIVED",
                "RECEIVED",
                "CANCELLED",
                "CLOSED"
            ],
            "x-enum-varnames": [
                "PurchaseOrderStatusDraft",
                "PurchaseOrderStatusSubmitted",
                "PurchaseOrderStatusApproved",
                "PurchaseOrderStatusSent",
                "PurchaseOrderStatusConfirmed",
                "PurchaseOrderStatusPartial",
                "PurchaseOrderStatusReceived",
                "PurchaseOrderStatusCancelled",
                "PurchaseOrderStatusClosed"
            ]
        },
        "entity.PurchasePayment": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "$ref": "#/definitions/entity.User"
                },
                "created_by_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "payment_date": {
                    "type": "string"
                },
                "payment_method": {
                    "type": "string"
                },
                "payment_number": {
                    "type": "string"
                },
                "purchase_order": {
                    "$ref": "#/definitions/entity.PurchaseOrder"
                },
                "purchase_order_id": {
                    "type": "string"
                },
                "reference_number": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "entity.PurchaseReceipt": {
            "type": "object",
            "properties": {
                "attachment_urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.PurchaseReceiptItem"
                    }
                },
                "notes": {
                    "type": "string"
                },
                "purchase_order": {
                    "$ref": "#/definitions/entity.PurchaseOrder"
                },
                "purchase_order_id": {
                    "type": "string"
                },
                "receipt_date": {
                    "type": "string"
                },
                "receipt_number": {
                    "type": "string"
                },
                "received_by": {
                    "$ref": "#/definitions/entity.User"
                },
                "received_by_id": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "warehouse_id": {
                    "type": "string"
                }
            }
        },
        "entity.PurchaseReceiptItem": {
            "type": "object",
            "properties": {
                "item": {
                    "$ref": "#/definitions/entity.Item"
                },
                "item_id": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "ordered_quantity": {
                    "type": "number"
                },
                "received_quantity": {
                    "type": "number"
                },
                "rejected_quantity": {
                    "type": "number"
                },
                "total_price": {
                    "type": "number"
                },
                "unit_price": {
                    "type": "number"
                }
            }
        },
        "entity.PurchaseRequest": {
            "type": "object",
            "properties": {
                "approval_date": {
                    "type": "string"
                },
                "approval_notes": {
                    "type": "string"
                },
                "approver": {
                    "$ref": "#/definitions/entity.User"
                },
                "approver_id": {
                    "type": "integer"
                },
                "attachment_urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "currency_code": {
                    "type": "string"
                },
                "department_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.PurchaseRequestItem"
                    }
                },
                "purchase_order": {
                    "$ref": "#/definitions/entity.PurchaseOrder"
                },
                "purchase_order_id": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                },
                "request_date": {
                    "type": "string"
                },
                "request_number": {
                    "type": "string"
                },
                "requester": {
                    "$ref": "#/definitions/entity.User"
                },
                "requester_id": {
                    "type": "integer"
                },
                "required_date": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/entity.PurchaseRequestStatus"
                },
                "total_estimated": {
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "entity.PurchaseRequestItem": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "item": {
                    "$ref": "#/definitions/entity.Item"
                },
                "item_id": {
                    "type": "string"
                },
                "quantity": {
                    "type": "number"
                }
            }
        },
        "entity.PurchaseRequestStatus": {
            "type": "string",
            "enum": [
                "DRAFT",
                "SUBMITTED",
                "APPROVED",
                "REJECTED",
                "CANCELLED",
                "ORDERED"
            ],
            "x-enum-varnames": [
                "PurchaseRequestStatusDraft",
                "PurchaseRequestStatusSubmitted",
                "PurchaseRequestStatusApproved",
                "PurchaseRequestStatusRejected",
                "PurchaseRequestStatusCancelled",
                "PurchaseRequestStatusOrdered"
            ]
        },
        "entity.ReportFormat": {
            "type": "string",
            "enum": [
                "CSV",
                "EXCEL",
                "PDF",
                "JSON"
            ],
            "x-enum-varnames": [
                "ReportFormatCSV",
                "ReportFormatExcel",
                "ReportFormatPDF",
                "ReportFormatJSON"
            ]
        },
        "entity.ReportParameters": {
            "type": "object",
            "additionalProperties": true
        },
        "entity.ReportScheduleFrequency": {
            "type": "string",
            "enum": [
                "DAILY",
                "WEEKLY",
                "MONTHLY",
                "QUARTERLY",
                "YEARLY"
            ],
            "x-enum-varnames": [
                "ReportScheduleDaily",
                "ReportScheduleWeekly",
                "ReportScheduleMonthly",
                "ReportScheduleQuarterly",
                "ReportScheduleYearly"
            ]
        },
        "entity.ReportType": {
            "type": "string",
            "enum": [
                "INVENTORY",
                "PURCHASE",
                "SALES",
                "PROFIT_LOSS",
                "FINANCIAL",
                "CUSTOM"
            ],
            "x-enum-varnames": [
                "ReportTypeInventory",
                "ReportTypePurchase",
                "ReportTypeSales",
                "ReportTypeProfitAndLoss",
                "ReportTypeFinancial",
                "ReportTypeCustom"
            ]
        },
        "entity.Role": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Permission"
                    }
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "entity.SalesOrder": {
            "type": "object",
            "properties": {
                "billing_address": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "$ref": "#/definitions/entity.User"
                },
                "created_by_id": {
                    "type": "integer"
                },
                "customer": {
                    "description": "Using User as Customer for now",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.User"
                        }
                    ]
                },
                "customer_id": {
                    "type": "integer"
                },
                "delivery_orders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.DeliveryOrder"
                    }
                },
                "discount_total": {
                    "type": "number"
                },
                "grand_total": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "invoices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Invoice"
                    }
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.SalesOrderItem"
                    }
                },
                "notes": {
                    "type": "string"
                },
                "order_date": {
                    "type": "string"
                },
                "order_number": {
                    "type": "string"
                },
                "payment_method": {
                    "$ref": "#/definitions/entity.PaymentMethod"
                },
                "payment_status": {
                    "$ref": "#/definitions/entity.PaymentStatus"
                },
                "shipping_address": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/entity.SalesOrderStatus"
                },
                "sub_total": {
                    "type": "number"
                },
                "tax_total": {
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "entity.SalesOrderItem": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "discount": {
                    "type": "number"
                },
                "item": {
                    "$ref": "#/definitions/entity.Item"
                },
                "item_id": {
                    "type": "string"
                },
                "quantity": {
                    "type": "number"
                },
                "tax_amount": {
                    "type": "number"
                },
                "tax_rate": {
                    "type": "number"
                },
                "total_price": {
                    "type": "number"
                },
                "unit_price": {
                    "type": "number"
                }
            }
        },
        "entity.SalesOrderStatus": {
            "type": "string",
            "enum": [
                "DRAFT",
                "CONFIRMED",
                "PROCESSING",
                "SHIPPED",
                "DELIVERED",
                "COMPLETED",
                "CANCELLED"
            ],
            "x-enum-varnames": [
                "SalesOrderStatusDraft",
                "SalesOrderStatusConfirmed",
                "SalesOrderStatusProcessing",
                "SalesOrderStatusShipped",
                "SalesOrderStatusDelivered",
                "SalesOrderStatusCompleted",
                "SalesOrderStatusCancelled"
            ]
        },
        "entity.StockEntry": {
            "type": "object",
            "properties": {
                "batch_number": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lot_number": {
                    "type": "string"
                },
                "note": {
                    "type": "string"
                },
                "product_id": {
                    "type": "string"
                },
                "quantity": {
                    "type": "number"
                },
                "reference": {
                    "description": "PO/SO number",
                    "type": "string"
                },
                "type": {
                    "description": "IN/OUT",
                    "type": "string"
                },
                "warehouse_id": {
                    "type": "string"
                }
            }
        },
        "entity.Supplier": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "contact_info": {
                    "$ref": "#/definitions/entity.ContactInfo"
                },
                "contracts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Contract"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "payment_terms": {
                    "$ref": "#/definitions/entity.PaymentTerms"
                },
                "products": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Product"
                    }
                },
                "rating": {
                    "type": "number"
                },
                "type": {
                    "$ref": "#/definitions/entity.SupplierType"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "entity.SupplierType": {
            "type": "string",
            "enum": [
                "manufacturer",
                "wholesaler",
                "distributor",
                "retailer"
            ],
            "x-enum-varnames": [
                "Manufacturer",
                "Wholesaler",
                "Distributor",
                "Retailer"
            ]
        },
        "entity.TechnicalSpecs": {
            "type": "object",
            "additionalProperties": true
        },
        "entity.UpdateFinanceInvoiceRequest": {
            "type": "object",
            "properties": {
                "discount_amount": {
                    "type": "number"
                },
                "due_date": {
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.FinanceInvoiceItem"
                    }
                },
                "notes": {
                    "type": "string"
                },
                "reference_id": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/entity.FinanceInvoiceStatus"
                }
            }
        },
        "entity.UpdateFinancePaymentRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "notes": {
                    "type": "string"
                },
                "payment_method": {
                    "$ref": "#/definitions/entity.FinancePaymentMethod"
                },
                "reference_number": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/entity.FinancePaymentStatus"
                }
            }
        },
        "entity.UpdateReportScheduleRequest": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "format": {
                    "$ref": "#/definitions/entity.ReportFormat"
                },
                "frequency": {
                    "$ref": "#/definitions/entity.ReportScheduleFrequency"
                },
                "name": {
                    "type": "string"
                },
                "parameters": {
                    "$ref": "#/definitions/entity.ReportParameters"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "entity.User": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_login": {
                    "type": "string"
                },
                "role": {
                    "$ref": "#/definitions/entity.Role"
                },
                "role_id": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/entity.UserStatus"
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "entity.UserStatus": {
            "type": "string",
            "enum": [
                "active",
                "inactive",
                "locked"
            ],
            "x-enum-varnames": [
                "StatusActive",
                "StatusInactive",
                "StatusLocked"
            ]
        },
        "entity.Warehouse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "contact": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "manager_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/entity.WarehouseStatus"
                },
                "type": {
                    "$ref": "#/definitions/entity.WarehouseType"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "entity.WarehouseStatus": {
            "type": "string",
            "enum": [
                "ACTIVE",
                "INACTIVE"
            ],
            "x-enum-varnames": [
                "WarehouseStatusActive",
                "WarehouseStatusInactive"
            ]
        },
        "entity.WarehouseType": {
            "type": "string",
            "enum": [
                "RAW",
                "FINISHED",
                "GENERAL"
            ],
            "x-enum-varnames": [
                "WarehouseTypeRaw",
                "WarehouseTypeFinished",
                "WarehouseTypeGeneral"
            ]
        },
        "server.AuditLogResponse": {
            "type": "object",
            "properties": {
                "logs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.AuditLog"
                    }
                },
                "total": {
                    "type": "integer",
                    "example": 100
                }
            }
        },
        "server.CreateDeliveryOrderRequest": {
            "type": "object",
            "required": [
                "delivery_date",
                "items",
                "warehouse_id"
            ],
            "properties": {
                "delivery_date": {
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.DeliveryOrderItem"
                    }
                },
                "notes": {
                    "type": "string"
                },
                "shipping_address": {
                    "type": "string"
                },
                "shipping_method": {
                    "type": "string"
                },
                "tracking_number": {
                    "type": "string"
                },
                "warehouse_id": {
                    "type": "string"
                }
            }
        },
        "server.CreateInvoiceRequest": {
            "type": "object",
            "required": [
                "due_date"
            ],
            "properties": {
                "amount": {
                    "type": "number"
                },
                "due_date": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "tax_amount": {
                    "type": "number"
                },
                "total_amount": {
                    "type": "number"
                }
            }
        },
        "server.CreateRoleRequest": {
            "type": "object",
            "required": [
                "name",
                "permissions"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "example": "manager"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Permission"
                    },
                    "example": [
                        "[\"user:read\"",
                        "\"user:create\"]"
                    ]
                }
            }
        },
        "server.CreateSalesOrderRequest": {
            "type": "object",
            "required": [
                "customer_id",
                "items",
                "warehouse_id"
            ],
            "properties": {
                "billing_address": {
                    "type": "string"
                },
                "customer_id": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.SalesOrderItem"
                    }
                },
                "notes": {
                    "type": "string"
                },
                "payment_method": {
                    "$ref": "#/definitions/entity.PaymentMethod"
                },
                "shipping_address": {
                    "type": "string"
                },
                "warehouse_id": {
                    "type": "string"
                }
            }
        },
        "server.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Error message"
                }
            }
        },
        "server.ForgotPasswordRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john@example.com"
                }
            }
        },
        "server.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "secret123"
                }
            }
        },
        "server.LoginResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJ..."
                },
                "refresh_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJ..."
                },
                "user": {
                    "$ref": "#/definitions/entity.User"
                }
            }
        },
        "server.MessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                }
            }
        },
        "server.PaginatedResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "page": {
                    "type": "integer"
                },
                "page_size": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                },
                "total_page": {
                    "type": "integer"
                }
            }
        },
        "server.RefreshTokenRequest": {
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJ..."
                }
            }
        },
        "server.RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "password",
                "role_id",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john@example.com"
                },
                "password": {
                    "type": "string",
                    "minLength": 6,
                    "example": "secret123"
                },
                "role_id": {
                    "type": "integer",
                    "example": 2
                },
                "username": {
                    "type": "string",
                    "example": "johnsmith"
                }
            }
        },
        "server.ResetPasswordRequest": {
            "type": "object",
            "required": [
                "new_password",
                "token"
            ],
            "properties": {
                "new_password": {
                    "type": "string",
                    "minLength": 6,
                    "example": "newpass123"
                },
                "token": {
                    "type": "string",
                    "example": "reset_token_123"
                }
            }
        },
        "server.SuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                }
            }
        },
        "server.TokenResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJ..."
                }
            }
        },
        "server.UpdateRoleRequest": {
            "type": "object",
            "required": [
                "name",
                "permissions"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "example": "manager"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Permission"
                    },
                    "example": [
                        "[\"user:read\"",
                        "\"user:create\"]"
                    ]
                }
            }
        },
        "server.UpdateUserRequest": {
            "type": "object",
            "required": [
                "email",
                "role_id",
                "status",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john@example.com"
                },
                "role_id": {
                    "type": "integer",
                    "example": 2
                },
                "status": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.UserStatus"
                        }
                    ],
                    "example": "active"
                },
                "username": {
                    "type": "string",
                    "example": "johnsmith"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{"http", "https"},
	Title:            "ERP Warehouse API",
	Description:      "Simple ERP Warehouse Management System API",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
