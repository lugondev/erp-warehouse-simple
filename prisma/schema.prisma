generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model audit_logs {
  id         BigInt    @id @default(autoincrement())
  user_id    BigInt?
  action     String?   @db.VarChar(20)
  resource   String?   @db.VarChar(50)
  detail     String?
  ip         String?   @db.VarChar(45)
  user_agent String?
  created_at DateTime? @db.Timestamptz(6)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_audit_logs_user")
}

model roles {
  id          BigInt    @id @default(autoincrement())
  name        String    @unique
  permissions String[]
  created_at  DateTime? @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  users       users[]
}

model stock_entries {
  id               String    @id @db.Uuid
  sk_uid           String    @db.Uuid
  store_id         String    @db.Uuid
  type             String
  quantity         Decimal   @db.Decimal
  batch_number     String?
  lot_number       String?
  manufacture_date DateTime? @db.Timestamptz(6)
  expiry_date      DateTime? @db.Timestamptz(6)
  reference        String?
  note             String?
  created_at       DateTime? @db.Timestamptz(6)
  created_by       String
  skus             skus      @relation(fields: [sk_uid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_stock_entries_sku")
  stores           stores    @relation(fields: [store_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_stock_entries_store")
}

model users {
  id                   BigInt       @id @default(autoincrement())
  username             String       @unique
  email                String       @unique
  password             String
  role_id              BigInt
  status               String?      @default("active") @db.VarChar(20)
  last_login           DateTime?    @db.Timestamptz(6)
  refresh_token        String?
  refresh_token_expiry DateTime?    @db.Timestamptz(6)
  password_reset_token String?      @db.VarChar(100)
  reset_token_expiry   DateTime?    @db.Timestamptz(6)
  created_at           DateTime?    @db.Timestamptz(6)
  updated_at           DateTime?    @db.Timestamptz(6)
  audit_logs           audit_logs[]
  stores               stores[]
  roles                roles        @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_role")
}

model client_addresses {
  id          BigInt    @id @default(autoincrement())
  client_id   BigInt
  type        String    @default("BOTH")
  street      String
  city        String
  state       String?
  postal_code String?
  country     String
  is_default  Boolean?  @default(false)
  created_at  DateTime? @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  clients     clients   @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_clients_addresses")
}

model clients {
  id               BigInt             @id @default(autoincrement())
  code             String             @unique
  name             String
  type             String             @default("INDIVIDUAL")
  email            String?            @unique
  phone_number     String?
  tax_id           String?
  contacts         Json?
  credit_limit     Decimal?           @default(0) @db.Decimal(15, 2)
  current_debt     Decimal?           @default(0) @db.Decimal(15, 2)
  loyalty_tier     String             @default("STANDARD")
  loyalty_points   BigInt?            @default(0)
  notes            String?
  created_at       DateTime?          @db.Timestamptz(6)
  updated_at       DateTime?          @db.Timestamptz(6)
  client_addresses client_addresses[]
}

model skus {
  id                                    String          @id @db.Uuid
  sku_code                              String          @unique(map: "idx_skus_sku_code")
  name                                  String
  description                           String?
  unit_of_measure                       String
  price                                 Decimal?        @default(0) @db.Decimal
  category                              String?
  technical_specs                       Json?
  manufacturer_id                       BigInt?
  vendor_id                             BigInt?
  image_url                             String?
  status                                String?         @default("ACTIVE")
  created_at                            DateTime?       @db.Timestamptz(6)
  updated_at                            DateTime?       @db.Timestamptz(6)
  vendors_skus_manufacturer_idTovendors vendors?        @relation("skus_manufacturer_idTovendors", fields: [manufacturer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_skus_manufacturer")
  vendors_skus_vendor_idTovendors       vendors?        @relation("skus_vendor_idTovendors", fields: [vendor_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_skus_vendor")
  stock_entries                         stock_entries[]
  stocks                                stocks[]
}

model stock_histories {
  id           String    @id @db.Uuid
  stock_id     String    @db.Uuid
  type         String
  quantity     Decimal   @db.Decimal
  previous_qty Decimal   @db.Decimal
  new_qty      Decimal   @db.Decimal
  reference    String?
  note         String?
  created_at   DateTime? @db.Timestamptz(6)
  created_by   String
  stocks       stocks    @relation(fields: [stock_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_stock_histories_stock")
}

model stocks {
  id               String            @id @db.Uuid
  sk_uid           String            @db.Uuid
  store_id         String            @db.Uuid
  quantity         Decimal           @default(0) @db.Decimal
  bin_location     String?
  shelf_number     String?
  zone_code        String?
  batch_number     String?
  lot_number       String?
  manufacture_date DateTime?         @db.Timestamptz(6)
  expiry_date      DateTime?         @db.Timestamptz(6)
  created_at       DateTime?         @db.Timestamptz(6)
  updated_at       DateTime?         @db.Timestamptz(6)
  stock_histories  stock_histories[]
  skus             skus              @relation(fields: [sk_uid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_stocks_sku")
  stores           stores            @relation(fields: [store_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_stores_stocks")
}

model stores {
  id            String          @id @db.Uuid
  name          String          @unique
  code          String?         @unique
  address       String?
  type          String
  manager_id    BigInt
  contact       String?
  status        String          @default("ACTIVE")
  created_at    DateTime?       @db.Timestamptz(6)
  updated_at    DateTime?       @db.Timestamptz(6)
  stock_entries stock_entries[]
  stocks        stocks[]
  users         users           @relation(fields: [manager_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_stores_manager")
}

model vendors {
  id                                 BigInt    @id @default(autoincrement())
  code                               String    @unique
  name                               String
  type                               String?
  address                            String?
  country                            String?
  email                              String?
  phone                              String?
  website                            String?
  tax_id                             String?
  payment_method                     String?
  payment_days                       BigInt?
  currency                           String?
  rating                             Decimal?  @default(0) @db.Decimal(3, 2)
  created_at                         DateTime? @db.Timestamptz(6)
  updated_at                         DateTime? @db.Timestamptz(6)
  skus_skus_manufacturer_idTovendors skus[]    @relation("skus_manufacturer_idTovendors")
  skus_skus_vendor_idTovendors       skus[]    @relation("skus_vendor_idTovendors")
}
